{"version":3,"sources":["ItemList.js","AddItem.js","App.js","serviceWorker.js","index.js"],"names":["ItemList","props","itemLIst","item","map","className","key","type","id","value","text","onChange","e","updateItem","target","onClick","deleteItem","AddItem","state","items","currentItem","onchangeHandle","bind","onsubmitHandle","this","setState","Date","now","preventDefault","newItem","newItems","filterItem","filter","onSubmit","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAsBeA,G,MAnBE,SAACC,GACd,IACMC,EADOD,EAAME,KACGC,KAAI,SAAAD,GACtB,OAAO,yBAAKE,UAAU,WAAWC,IAAKH,EAAKG,KACxC,2BAAOC,KAAK,OAAOC,GAAIL,EAAKG,IAAKG,MAAON,EAAKO,KAAMC,SAC/C,SAACC,GAAD,OAAKX,EAAMY,WAAWD,EAAEE,OAAOL,MAAON,EAAKG,QAG9C,4BAAQD,UAAU,YAAYU,QAAS,kBAAId,EAAMe,WAAWb,EAAKG,OAAjE,cAGR,OACI,yBAAKD,UAAU,SAEVH,KC0DEe,G,wDAtEX,WAAYhB,GAAO,IAAD,8BACd,cAAMA,IACDiB,MAAM,CACPC,MAAM,GACNC,YAAY,CACRV,KAAK,GACLJ,IAAI,KAGZ,EAAKe,eAAe,EAAKA,eAAeC,KAApB,gBACpB,EAAKC,eAAe,EAAKA,eAAeD,KAApB,gBACpB,EAAKN,WAAW,EAAKA,WAAWM,KAAhB,gBAChB,EAAKT,WAAW,EAAKA,WAAWS,KAAhB,gBAZF,E,2DAeHV,GACXY,KAAKC,SAAS,CACVL,YAAY,CACRV,KAAKE,EAAEE,OAAOL,MACdH,IAAIoB,KAAKC,W,qCAINf,GACXA,EAAEgB,iBACF,IAAMC,EAAUL,KAAKN,MAAME,YAC3B,GAAoB,KAAjBS,EAAQnB,KAAY,CACnB,IAAMoB,EAAQ,sBAAON,KAAKN,MAAMC,OAAlB,CAAyBU,IACvCL,KAAKC,SAAS,CACVN,MAAMW,EACNV,YAAY,CACRV,KAAK,GACLJ,IAAI,S,iCAKTM,GACP,IAAMmB,EAAaP,KAAKN,MAAMC,MAAMa,QAAO,SAAA7B,GAAI,OAAIA,EAAKG,MAAQM,KAChEY,KAAKC,SAAS,CACVN,MAAMY,M,iCAGLrB,EAAMJ,GACf,IAAMH,EAAOqB,KAAKN,MAAMC,MACxBhB,EAAKC,KAAI,SAAAD,GACFA,EAAKG,MAAQA,IACZH,EAAKO,KAAKA,MAGlBc,KAAKC,SAAS,CACVN,MAAMhB,M,+BAIN,OACI,yBAAKE,UAAU,iBACX,0BAAM4B,SAAUT,KAAKD,gBACjB,2BAAOhB,KAAK,OAAOE,MAAOe,KAAKN,MAAME,YAAYV,KAAMC,SAAUa,KAAKH,iBACtE,4BAAQd,KAAK,UAAb,QAEJ,kBAAC,EAAD,CAAUJ,KAAQqB,KAAKN,MAAMC,MAC7BH,WAAcQ,KAAKR,WACnBH,WAAYW,KAAKX,kB,GAhEXqB,cCWPC,E,uKARX,OACE,6BACE,kBAAC,EAAD,W,GAJUD,aCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d11eae2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './itemList.css'\r\n\r\nconst ItemList = (props) => {\r\n    const item = props.item;\r\n    const itemLIst = item.map(item => {\r\n        return <div className=\"itemList\" key={item.key}>\r\n           <input type=\"text\" id={item.key} value={item.text} onChange={\r\n               (e)=>props.updateItem(e.target.value, item.key)\r\n           }/>\r\n            \r\n            <button className=\"removeBtn\" onClick={()=>props.deleteItem(item.key)}>Remove</button>\r\n        </div>\r\n    })\r\n    return (\r\n        <div className=\"items\">\r\n            \r\n            {itemLIst}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ItemList;","import React, { Component } from 'react';\r\nimport ItemList from './ItemList';\r\nimport './AddItem.css'\r\n\r\nclass AddItem extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            items:[],\r\n            currentItem:{\r\n                text:'',\r\n                key:''\r\n            }\r\n        }\r\n        this.onchangeHandle=this.onchangeHandle.bind(this)\r\n        this.onsubmitHandle=this.onsubmitHandle.bind(this)\r\n        this.deleteItem=this.deleteItem.bind(this)\r\n        this.updateItem=this.updateItem.bind(this)\r\n    }\r\n\r\n    onchangeHandle(e){\r\n        this.setState({\r\n            currentItem:{\r\n                text:e.target.value,\r\n                key:Date.now()\r\n            }\r\n        })\r\n    }\r\n    onsubmitHandle(e){\r\n        e.preventDefault()\r\n        const newItem = this.state.currentItem\r\n        if(newItem.text !== ''){\r\n            const newItems = [...this.state.items, newItem]\r\n            this.setState({\r\n                items:newItems,\r\n                currentItem:{\r\n                    text:'',\r\n                    key:''\r\n                }\r\n            })\r\n        }\r\n    }\r\n    deleteItem(e){\r\n        const filterItem = this.state.items.filter(item => item.key !== e)\r\n        this.setState({\r\n            items:filterItem\r\n        })\r\n    }\r\n  updateItem(text, key){\r\n    const item = this.state.items;\r\n    item.map(item => {\r\n        if(item.key === key){\r\n            item.text=text;\r\n        }\r\n    })\r\n    this.setState({\r\n        items:item\r\n    })\r\n  }\r\n    render() {\r\n        return (\r\n            <div className=\"listContainer\">\r\n                <form onSubmit={this.onsubmitHandle}>\r\n                    <input type=\"text\" value={this.state.currentItem.text} onChange={this.onchangeHandle}/>\r\n                    <button type=\"submit\">Add</button>\r\n                </form>\r\n                <ItemList item = {this.state.items} \r\n                deleteItem = {this.deleteItem}\r\n                updateItem={this.updateItem}\r\n                ></ItemList>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddItem;","import React, { Component } from 'react';\nimport AddItem from './AddItem';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <AddItem></AddItem>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}